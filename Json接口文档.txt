Json接口文档


==================框架基本结构==================

接受：
{
	"id": ID, // 任务id（是一个唯一的序列号，由时间+随机数组成）
	"info": {	// 任务信息
		"content": 内容,	// 任务请求附加内容 由type决定
		"user_id": userID,	// 发起任务的用户id 登录操作时任意填写
		"session": "session",	// 用户会话 登陆操作时任意填写
		"type": 0		// 任务类型 表明这是一个什么任务 决定任务附加内容的格式   总是为数字
	}
}



返回：
{
	"id": ID, 	// 任务id  与上面的一致
	"info": {	// 任务信息
		"content":内容,		// 任务执行结果附加内容 由status决定格式
		"status": 0		// 任务执行结果  总是为数字
	}
}



==================用户类型定义==================
符号名				可阅读名			实现中的类型编号（ID）
public_operator     公共操作            32
unkown				未知（前置）			32		（前置用户即为未登录用户，鉴权时不检查框架中的用户ID和session，任意填写但不能不填，可简单设为0和短内容字符串）
end_user			最终用户（学生与教师）		16
maintainer			维修人员			8
region_admin			区域管理员（楼管）		4
admin				管理员				2
root				全权管理员			1		（root管理不应该暴露给最终用户的与系统实现有关的细节设置）
simple				简单用户（测试）		0




=============留言信息的State字段含义===============
0 留言     
1 报修     
2 已查看的留言     
3 已经解决的报修



==================特别登录限制==================
id小于3的用户类型不能重复登录（先登录用户会被清除会话）



==================操作的特别编号==================
无须用户登录的前置操作编号>=16#40000000（16进制的40000000）



==================操作的一般返回==================
鉴权时 session无效或过期时返回结构：（需要用户重新登录）
status:16#3FFFFFFF
content:"用户权限不足"

用户权限与操作匹配失败时返回结构：（这个错误一般是设计错误）
status:16#7FFFFFFF
content:"不正确的请求"

content结构不正确时返回结构：（这个错误一般是设计错误）
status:16#5FFFFFFF
content:"找不到所需的KEY"

调用的操作所对应的功能模块不在分布式网络中时返回：（这个错误因操作对应的功能模块dead或未启动或网络中断导致，需要管理员检查对应模块所在服务器在线状态）
status:16#9FFFFFFF
content:"远程节点不在线"


一般失败时status:1   一般成功时status:0


======================注释======================
下面说明中“请求content结构”标注为“不关心”的表示不会检查content但content必须存在（可以直接设为json的null）




====================详细的各类型====================


===================登陆操作：
编号：16#40000001
用户身份限制：=32
请求content结构：{"name":UserName,"password":UserPassword}
返回：
status:1 
content:"没有这个用户"
status:0
content:{"id": 用户ID（number）, "nick": Nick昵称, "session": Session（string）, "type": Type用户类型}
注释：框架中的用户ID和session任意填写但不能不填



===================注册操作：
编号：16#40000002
用户身份限制：=32
请求content结构：{"name": UserName,"nick": UserNick,"password": UserPassword}
返回：
status:1
content:"重名"
status:0
content:null
注释：用户用户名必须唯一 昵称可以重复 用户名、昵称、密码都为字符串




===================登出：
编号：1
用户身份限制：=<16
请求content结构：不关心
返回：
status:0
content:null
注释：
1登出总是成功的
2登出所需的信息直接从json框架中获取（操作是直接清除存储的session）




===================修改用户身份权限：
编号：2
用户身份限制：=<2
请求content结构：{"id": UserId, "type": UserType}
返回：
status:2
content:"对自己提权"
status:1
content:"失败"
status:0
content:null
注释：不成功 便失败（好像并没有什么不对）
只允许管理员级用户(admin)提权
不允许用户提权至小于2
不允许用户修改自己的权限


===================获取所有用户：
编号：3
用户身份限制：=<2
请求content结构：不关心
返回：
status:0 获取失败时
content:null
status:0 成功时
content:{"user_info_array":[{"id":ID,"name":Name,"nick":Nick,"type":Type},{...},{...},.........]}
注释：数据库连接发生错误时content:null，成功时返回包含数组的json



===================发布留言：
编号：4
用户身份限制：=<32
请求content结构：
{
    "userId": UserId, 
    "userName": UserName, 
    "message": Message, 
    "controllerId": ControllerId, 
    "deviceId": DeviceId, 
    "type": 留言类型
}
留言类型: 0 留言    1 报修
返回：
status:0
content:null
status:1
content:"异常失败"
注释：



===================获取最新留言id（数据库中最大的id号）：
编号：16#4000000A
用户身份限制：=<32
请求content结构：不关心
返回：
status:0
content:{"max_id": ID}
status:1
content:"异常失败"
注释：



===================获取显示的留言数量总数：
编号：16#4000000C
用户身份限制：=<32
请求content结构：不关心
返回：
status:0
content:{"count_number": Number}
status:1
content:"异常失败"
注释：



===================获取留言第N页的内容（以M条为一页）：
编号：16#4000000B
用户身份限制：=<32
请求content结构：{"Nth": N,"byM": M}
返回：
status:0
content:（结果为一个列表）

{"messages":
    [
        {
            "id":ID,
            "userId":UserId,
            "userName":UserName,
            "message":Message,
            "state":State,
            "controllerId":ControllerId,
            "deviceId":DeviceId,
            "deleted":DeletedFlag,
            "date":消息发布时间（插入数据库的时间） 数据库timestamp格式字串
        },
        {...},
        {...},
        .........
    ]
}

status:1
content:"异常失败"
注释：



===================删除（隐藏）（标记为删除）指定留言ID的留言：
编号：8
用户身份限制：=<2
请求content结构：{"id": Id}
返回：
status:0
content:null
status:1
content:"异常失败"
注释：



===================获取所有指定状态的显示信息：
编号：16#4000000D
用户身份限制：=<32
请求content结构：{"state": State}        其中State取值0,1,2,3
返回：
status:0
content:（结果为一个列表）

{"messages":
    [
        {
            "id":ID,
            "userId":UserId,
            "userName":UserName,
            "message":Message,
            "state":State,
            "controllerId":ControllerId,
            "deviceId":DeviceId,
            "deleted":DeletedFlag,
            "date":消息发布时间（插入数据库的时间） 数据库timestamp格式字串
        },
        {...},
        {...},
        .........
    ]
}

status:1
content:"异常失败"
注释：



===================设定指定ID的留言的状态：
编号：10
用户身份限制：=<8
请求content结构：{"id": Id, "state": State}
返回：
status:0
content:null
status:1
content:"异常失败"
注释：



===================获取数据库所有留言信息：
编号：11
用户身份限制：=<2
请求content结构：不关心
返回：
status:0
content:（结果为一个列表）

{"messages":
    [
        {
            "id":ID,
            "userId":UserId,
            "userName":UserName,
            "message":Message,
            "state":State,
            "controllerId":ControllerId,
            "deviceId":DeviceId,
            "deleted":DeletedFlag,
            "date":消息发布时间（插入数据库的时间） 数据库timestamp格式字串
        },
        {...},
        {...},
        .........
    ]
}

status:1
content:"异常失败"
注释：



===================获取所有房间列表：
编号：12
用户身份限制：=<32
请求content结构：不关心
返回：
status:0
content:（结果为一个列表）

{"rooms":
    [
        {
            "roomID":RoomID,
            "name":RoomName
        },
        {...},
        {...},
        .........
    ]
}

status:1
content:"异常失败"
注释：




===================添加房间：
编号：13
用户身份限制：=<2
请求content结构：{"name",RoomName}
返回：
status:0
content:null
status:1
content:"异常失败"
注释：






===================获取指定房间的设备列表：
编号：14
用户身份限制：=<32
请求content结构：{"id": RoomId}
返回：
status:0
content:（结果为一个列表）

{"list":
    [
        {
            "roomID": RoomID,
            "controllerId": ControlId,
            "deviceId": DeviceID,
            "deviceName": DeviceName,
            "devicetype": DeviceType,
            "status": Status,
            "substatus": SubStatus
        },
        {...},
        {...},
        .........
    ]
}

status:1
content:"异常失败"
注释：
1 没有这个房间或房间内没有设备会返回空列表
2 获取的全都是静态信息




===================获取未绑定设备列表：
编号：15
用户身份限制：=<2
请求content结构：不关心
返回：
status:0
content:（结果为一个列表）

{"list":
    [
        {
            "roomID":RoomID
        },
        {...},
        {...},
        .........
    ]
}

status:1
content:"异常失败"
注释：
其中房间id是1



===================绑定设备：
编号：16
用户身份限制：=<2
请求content结构：{"roomID": RoomId,"controllerId": ControlId}
返回：
status:0
content:null
status:1
content:"异常失败"
status:2
content:"参数错误"
注释：参数错误表示RoomId或者ControlId无效或者已经被以指定的方式绑定导致数据库中没有任何一行被修改





===================解绑定设备：
编号：17
用户身份限制：=<2
请求content结构：{"controllerId": ControlId}
返回：
status:0
content:null
status:1
content:"异常失败"
status:2
content:"参数错误"
注释：参数错误表示RoomId或者ControlId无效或者已经被以指定的方式绑定导致数据库中没有任何一行被修改






===================删除房间：
编号：18
用户身份限制：=<2
请求content结构：{"roomID": RoomId}
返回：
status:0
content:null
status:1
content:"异常失败"
注释：
会自动解绑定该房间下的所有设备
正常情况下，不管有没有此房间都会成功




===================获取静态信息数据库刷新时间：
编号：22
用户身份限制：=<32
请求content结构：不关心
返回：
status:0
content:

{
    "list":
    [
        {
            "table": 表名,
            "time": 时间字串   SQL数据库使用now()函数得到的时间格式  例如：2015-11-16 22:05:45
        },
        {...},
        {...}.
        ..............
    ]
}

status:1
content:"异常失败"
注释：





===================获取房间对应的设备数量统计：
编号：23
用户身份限制：=<32
请求content结构：
返回：
status:0
content:

{
    "list":
    [
        {
            "roomID": RoomId,
            "controllerId": ControllerId,
            "devicecount": 该控制器下对应的设备数量统计
        },
        {...},
        {...}.
        ..............
    ]
}

status:1
content:"异常失败"
注释：
一个房间可能对应多个控制器
但是一个控制器只能对应一个房间
所以一个控制器下所有设备都属于同一个房间




===================添加设备类型：
编号：24
用户身份限制：=<1
请求content结构：{"typeid":TypeId,"status":Status,"substatus":SubStatus,"name":Name}
返回：
status:0
content:null
status:1
content:"异常失败"
注释：
这个接口应该只在系统部署时使用  应该在部署设备前添加好所有配置在控制器中的类型  
自动注册时注册不存在数据库中的设备类型会导致自动注册失败
这个接口不应该暴露给除了系统维护以及安装部署人员之下的任何人



===================获取房间设备数量统计与控制器列表：
编号：16#4000000E
用户身份限制：=<32
请求content结构：不关心
返回：
status:0
content:

{
    "list":
    [
        {
            "roomId": RoomId,
            "roomName": RoomName,
            "deviceCount": 该房间下对应的设备数量统计,
            "controllerIdList":
            [
                ControllerId1,
                ControllerId2,
                ......
            ]
        },
        {...},
        {...}.
        ..............
    ]
}

status:1
content:"异常失败"
注释：
controllerIdList那个列表，因为Erlang对于纯数字list会自动当作字符串处理，所以必须以对象列表的形式操作






====================================================从这里往下的接口还未测试可用性============================================




===================直接控制设备状态：
编号：19
用户身份限制：=<16
请求content结构：
{"controllerId":ControlId,"deviceId":DevicelId,"status":DeviceState,"substatus":DeviceSubState}
返回：
status:0
content:null
status:1    分布式层错误
content:错误原因  offline节点不在线  double_node_error节点ID不为一  break_path_error分布式层路径中断
status:2    内部错误
content:错误原因
注释：
现在的实现中任务“下发”成功就会直接返回成功 而不会管任务是否真的“投递”到了节点上 也不管节点是否真的执行了任务
要确定节点动作了 现在的实现必须使用下面的API从节点状态高速缓存中获取节点状态 而高速缓存的刷新是由时间间隔的
但是可以通过高速缓存中的刷新时间知道高速缓存是什么时候更新的




===================从缓存中获取设备控制器状态：
编号：20
用户身份限制：=<32
请求content结构：{"controllerId": ControlId}
返回：
status:0
content:

{
    "controllerId":ControlId,
    "flush_time":节点发送刷新消息的时间,   //格式:"YYYY-MM-DD HH:MM:SS.mmmmmm"
    "flush_recive_time":高速缓存接收到刷新消息的时间,   //格式:"YYYY-MM-DD HH:MM:SS.mmmmmm"
    "device_list":
    [
        {
            "deviceId":DeviceId,
            "deviceName":预定义在节点配置文件中的user-friendly名,
            "devicetype":设备类型id,
            "state":可选状态,
            "substate":可选子状态,
            "now_state":现在状态,
            "now_substate":现在子状态,
        },
        {...},
        {...}.
        ..............
    ]
}

status:1    高速缓存层
content:错误原因  dont_alive节点不存活（高速缓冲中没有）  timeout获取超时   
status:2    内部错误
content:错误原因
注释：



===================删除设备：
编号：21
用户身份限制：=<1
请求content结构：{"deviceId":DeviceId}
返回：
status:0
content:null
status:1
content:"异常失败"
注释：
注意 这是根管理员才能做的操作  随意删除设备会导致系统工作在未定义的状态下
这个接口不应该暴露给除了系统维护以及安装部署人员之下的任何人









===================：
编号：
用户身份限制：=<
请求content结构：
返回：
status:
content:
status:
content:
注释：



